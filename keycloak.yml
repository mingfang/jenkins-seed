namespaces:
  default:
    secrets:
      - name: keycloak-add-user
        data:
          keycloak-user: "{{keycloak_user}}"
          keycloak-password: "{{keycloak_password}}"

    services:
      - name: keycloak
        ports:
          - {name: http, port: 8080}
        annotations:
          nginx:
            - http:
                - server: login.*
                  paths:
                    - path: /
          icon: http://www.keycloak.org/resources/images/keycloak_logo_480x108.png
        pod:
          priorityClassName: critical
          replicas: 1
          containers:
          - name: keycloak
            image: ripper1:5000/keycloak:latest
            scm: https://github.com/mingfang/docker-keycloak.git
            env:
            - {name: KEYCLOAK_USER, valueFrom: {secretKeyRef: {name: keycloak-add-user, key: keycloak-user}}}
            - {name: KEYCLOAK_PASSWORD, valueFrom: {secretKeyRef: {name: keycloak-add-user, key: keycloak-password}}}
            - {name: POSTGRES_HOST, value: keycloak-postgres}
            lifecycle:
              postStart:
                exec:
                  command:
                    - "sh"
                    - "-c"
                    - |-
                      ARGS="--server http://localhost:8080/auth --realm master --user $KEYCLOAK_USER --password $KEYCLOAK_PASSWORD"
                      #wait for server
                      while ! /keycloak/bin/kcadm.sh get realms/master $ARGS; do sleep 3; done;

                      #add saml client
                      /keycloak/bin/kcadm.sh create clients -s clientId=saml -s protocol=saml -s attributes.saml_idp_initiated_sso_url_name=saml -s "attributes.saml_assertion_consumer_url_post=https://rebelsoft.com/saml/acs" $ARGS

                      #add drools client
                      /keycloak/bin/kcadm.sh create clients -s clientId=openid-connect -s protocol=openid-connect -s "rootUrl=https://drools.rebelsoft.com" -s "baseUrl=/drools" -s 'redirectUris=["/drools/*"]' $ARGS

                      #use github as idp
                      /keycloak/bin/kcadm.sh create identity-provider/instances -s alias=github -s providerId=github -s config.clientId=2844313b6902d981402a -s config.clientSecret=f4d1ba7985edd23679e3a39a21f6924f9f137945 -s config.defaultScope="user,read:org" $ARGS
                      
      - name: keycloak-postgres
        ports:
          - port: 5432
        annotations:
          icon: https://wiki.postgresql.org/images/thumb/7/71/PostgreSQL_logo.1color_blue.300x300.png/120px-PostgreSQL_logo.1color_blue.300x300.png
        stateful: true
        pod:
          replicas: 1
          containers:
          - name: postgres
            image: registry.rebelsoft.com/postgres:latest
            lifecycle:
              postStart:
                exec:
                  command:
                  - sh
                  - -c
                  - >
                    sleep 10;
                    psql -U postgres --command="select 1";
                    psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'keycloak'" | grep -q 1;
                    if [ $? -eq 1 ]; then
                      psql -U postgres -c "CREATE DATABASE keycloak";
                    fi;
                    psql -U postgres -tc "SELECT 1 FROM pg_user WHERE usename = 'keycloak'" | grep -q 1;
                    if [ $? -eq 1 ]; then
                      psql -U postgres -c "CREATE USER keycloak WITH PASSWORD 'keycloak'";
                    fi;
                    psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE keycloak TO keycloak";
              preStop:
                exec:
                  command:
                  - sh
                  - -c
                  - >
                    sudo -u postgres /usr/lib/postgresql/*/bin/pg_ctl -m smart -D /data stop;
            volumeMounts:
              - name: data
                mountPath: /usr/local/pgsql/data
                subPath: keycloak-postgres
          volumes:
          - name: data
            persistentVolumeClaim:
              claimName: cephfs
                      